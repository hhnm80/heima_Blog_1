// 建立一个app.js文件,建立一个app.js文件,每个文件有每个文件的意义,一定可以在配置文件里面看到.,,,,,
//引用express框架,引入什么框架什么模块,在其他的开发语言里面都很常见,我们现在只从弱类型语言里面入手,,,,
//在py里面就是import 模块 as 别名,,,在使用的时候就是使用别名,,,,

//引用express框架
//require相当于py里面的import,这里的别名别人喜欢用express,我觉得别名和模块名字一样不好,,,,因此我决定,,,,自己取一个别名,就叫做my_press,,,用下划线隔开命名叫做匈牙利法,另外一种变量命名的方法叫做驼峰法,,,匈牙利法看来比较高级,,,
// const express=require("express");
//这里是引入系统模块express,,,,,,,,当然后面我们还需要引入一个用户模块,,,,因此我们要搞清楚,,,,怎么构建一个自己的模块,,,,并且作为工具在别的地方引用,,,,,,,,,,,,



const my_express=require("express");


//单引号和双引号一样,,,,,因此我们一概使用双引号,,,,,
//创建网站服务器
//那么我们在这里可以看到个问题,如果这里写的是express(),,,,,,,编译器会提示你:"未解析的函数或方法 express() ",,,提示未解析的函数或者方法,,,,因此在这里我们可以得知,express的名字是一个别名,,,,,,是我们取的一个别名,,,,而不是直接使用模块名,,,当然后面接括号,证明express可能是一个类名,因为学习面向对象的时候我们就知道:类名(),,,就是创建一个类的对象
// const app=express();
//这样写就对了,,,,为什么呢????因为我们的别名取的是my_express,,,,,,,,
const app=my_express()

//监听端口,,,,,,,可以随便设置这个端口,,,但是最好不要8080 1080这些端口,,,这些端口,,,,,,,很容易和其他的进程冲突,我们一定要搞清楚进程和线程的区别,,,,,一个程序启动后,在系统里面(打开任务管理器)就可以看到这个程序,或者说这个软件的进程,,,,,,,,,,,,,,,,,,,,,,,,有些软件是单进程启动,就是只能打开一个窗口,,,,有些软件可以同时启动多个.,,,,,,,,,,,,
app.listen(80)

console.log("网站服务器启动成功!!!请访问locahost")

//怎么办


//导入用户模块,,,其实就是我们在route下面设置的路由模块,这是我们自己定义的模块,,,,一样可以在这里引入,,,,
//注意格式,,,,,,要不要带js呢??????  这里真有意思啊,,,带不带js都可以生效,,,,都可以生效,,,,,
const home_1=require("./route/home.js")
//这种引入是把正整个文件作为模块还是里面定义的home呢????我们不妨转到定义\
// 不带js后缀也可以生效,,,,
// const home_1=require("./route/home")
const admin_1=require("./route/admin.js")
// 但是我们引入模块的时候,exports后面的名字是my_admin,,,,,所以这时候,,,,这里面的引入到底是引入整个文件,还是引入这个名字呢???准确的说是以名字作为代号的模块,,,
// const admin_1=require("./route/admin")
// 但是如果admin_1在这里代表的是整个文件,,,,或者我们也不能这么肤浅的理解,,,,

//为路由匹配请求路径
app.use("/home",home_1)
// app.use("/admin",admin_1)
//请求路径可以随便修改,,,,可以随便修改,可以随便修改,,,,我们随便改一个
//
app.use("/abc",admin_1)

//在浏览器中输入.../abc这样的地址,,,,但是实际上,在浏览器里面,一般是输入什么.heml这样的结尾,就相当于去访问一个.html文件,,,但是html里面还需要嵌入js,css,图片文件等,因此这里就存在一个路径问题,如果路径这个没有处理好,,,就会导致网页无法载入图片,,,css js无法引用等故障,,,因此我们在打开的网页文件里面右键点击查看源代码,会出现这样的	<link rel="stylesheet" href="css/article.css">,,,,显然,这里引用的css文件是使用相对路径的形式进行引用,,,,,那么这里是当前目录下面的css文件夹下面的article.css文件,,,那么当前目录是什么呢????浏览器不知道,比如我们访问http://localhost/abc/login,,,为什么是这样一个地址呢???其实在浏览器地址栏中,一般访问的是html文件,,,,但是在这里,由于,程序里面经过了转换,所以/abc/login,这里的login要么是代表一个login.html,要么是代表一个login.art,,,,,程序会认为login是一个文件,那么程序这时候会认为文件夹在哪里呢???由于我们在login.html或者login.art里面写了	<link rel="stylesheet" href="css/article.css">这样的语句,,,然后程序会从地址栏认为文件夹是abc这个文件夹,,,然后html代码里面去寻找css文件夹下面的article.css文件,,,但是实际上,我们的渲染目录下面(程序里面设置的渲染目录是views目录),下面并没有abc这个文件夹,,,所以这时候是找不到css文件的,这时候网页就会出现一种情况就是css没被载入,,就不是原来的效果了!!!!为了避免这种情况,,,可以把相对路径改为绝对路径,,,,  views在程序里面设置的就是根目录,,,,,






//开放静态资源文件,,,,,,,引入系统模块path,,,,为了便于理解,我就不用path做别名,,,而是用my_path做别名,,,这样系统模块不和我的别名重名,,,,,
const my_path=require("path")

//开放静态资源文件,,,,,,这是什么意思呢??????在这里,我们必须搞清楚一个概念,,,就是绝对路径和相对路径的关系,,,,,,绝对路径就是带有盘符的完整路径,,,,相对路径,,,,,体现的就是目录的层次关系,,,,,在这里,join函数是拼接关系,,,,

//根文件夹的值是: C:\Users\lqc\WebstormProjects\heima_Blog
console.log("根文件夹的值是:",__dirname);
//拼接后的路径是:
//根文件夹的值是: C:\Users\lqc\WebstormProjects\heima_Blog\public
console.log("拼接后的文件夹的值是:",my_path.join(__dirname,"public"));
//果然,__dirname这是一个系统变量,,,在node里面是一个特殊值,就是当前路径,,,,C:\Users\lqc\WebstormProjects\heima_Blog,,,或者说是app.js所在的路径....
app.use(my_express.static(my_path.join(__dirname,"public")));

//告诉express框架模板所在的位置,指定了模板在第一个文件夹,,,,,
app.set("views",my_path.join(__dirname,"views"));

//告诉express框架,模板的默认后缀是什么
app.set("view engine","art");

//当渲染后缀为art的模板时,所使用的模板引擎是什么,,,看到require我们就可以知道,后面接的是一个系统模块,,,
app.engine("art",require("express-art-template"))